import os
from flask import Flask, request
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler
from apscheduler.schedulers.background import BackgroundScheduler
import openai
from datetime import datetime, timedelta
import pytz

TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
bot = Bot(token=TOKEN)
openai.api_key = OPENAI_KEY
app = Flask(__name__)
scheduler = BackgroundScheduler(timezone='Europe/Kyiv')
scheduler.start()

tasks = []

def start(update, context):
    keyboard = [["/add", "/list"], ["/remindme", "/ai"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text(
        "–í—ñ—Ç–∞—é, –°–µ—Ä–≥—ñ—é. –û–±–µ—Ä–∏ –¥—ñ—é:",
        reply_markup=reply_markup
    )

def add(update, context):
    text = ' '.join(context.args)
    if text:
        tasks.append(text)
        update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {text}")
    else:
        update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ø—ñ—Å–ª—è /add")

def show_list(update, context):
    if tasks:
        update.message.reply_text('\n'.join([f"{i+1}. {t}" for i, t in enumerate(tasks)]))
    else:
        update.message.reply_text("üì≠ –ó–∞–≤–¥–∞–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.")

def ai(update, context):
    prompt = update.message.text.replace('/ai', '').strip()
    if not prompt:
        update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /ai")
        return
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response['choices'][0]['message']['content']
        update.message.reply_text(answer)
    except Exception as e:
        update.message.reply_text("‚ùå GPT –ø–æ–º–∏–ª–∫–∞")

def remindme(update, context):
    args = context.args
    if len(args) < 2:
        update.message.reply_text("‚è∞ –ü—Ä–∏–∫–ª–∞–¥: /remindme 10:00 –Ω–∞–ø–∏—Å–∞—Ç–∏ –ª–∏—Å—Ç–∞")
        return
    try:
        time_str = args[0]
        task_text = ' '.join(args[1:])
        now = datetime.now(pytz.timezone('Europe/Kyiv'))
        remind_time = datetime.strptime(time_str, "%H:%M").replace(
            year=now.year, month=now.month, day=now.day, tzinfo=pytz.timezone('Europe/Kyiv')
        )
        if remind_time < now:
            remind_time += timedelta(days=1)

        def send_reminder():
            bot.send_message(chat_id=update.effective_chat.id, text=f"üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {task_text}")

        scheduler.add_job(send_reminder, trigger='date', run_date=remind_time)
        update.message.reply_text(f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_time.strftime('%H:%M')} ‚Äî {task_text}")
    except:
        update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –°–ø—Ä–æ–±—É–π: /remindme 14:30 –∑—É—Å—Ç—Ä—ñ—á")

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dp = Dispatcher(bot, None, workers=0)
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add))
    dp.add_handler(CommandHandler("list", show_list))
    dp.add_handler(CommandHandler("ai", ai))
    dp.add_handler(CommandHandler("remindme", remindme))
    dp.process_update(update)
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "Bot is running"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
