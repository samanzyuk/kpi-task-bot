import os
import logging
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import openai

TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_KEY

logging.basicConfig(level=logging.INFO)
bot = telegram.Bot(token=TOKEN)

def start(update, context):
    update.message.reply_text(
        "–í—ñ—Ç–∞—é, –°–µ—Ä–≥—ñ—é.\n–Ø ‚Äî —Ç–≤—ñ–π –±–æ—Ç. –ë–µ–∑ –∑–∞–π–≤–∏—Ö —Å–ª—ñ–≤.\n\n"
        "/add ‚Äî –∑–∞–≤–¥–∞–Ω–Ω—è\n"
        "/list ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏\n"
        "/ai ‚Äî –¥—É–º–∞—Ç–∏ —Ä–∞–∑–æ–º\n\n"
        "–ü—Ä–∞—Ü—é—î–º–æ."
    )

tasks = []

def add_task(update, context):
    task_text = ' '.join(context.args)
    if task_text:
        tasks.append(task_text)
        update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {task_text}")
    else:
        update.message.reply_text("‚ùó –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /add")

def list_tasks(update, context):
    if tasks:
        text = "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)])
        update.message.reply_text(f"üìã –ó–∞–≤–¥–∞–Ω–Ω—è:\n{text}")
    else:
        update.message.reply_text("üì≠ –ó–∞–≤–¥–∞–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.")

def ai(update, context):
    prompt = update.message.text.replace('/ai', '').strip()
    if not prompt:
        update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è /ai")
        return
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        answer = response['choices'][0]['message']['content']
        update.message.reply_text(answer)
    except Exception as e:
        update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ GPT. –ü–µ—Ä–µ–≤—ñ—Ä –∫–ª—é—á.")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add", add_task))
    dp.add_handler(CommandHandler("list", list_tasks))
    dp.add_handler(CommandHandler("ai", ai))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
